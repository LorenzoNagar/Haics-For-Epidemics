rbind(c("model", "b"), c("data", "a"))
model = "HMC"
strLineToAppend = c("#------------------------------")
strLineToAppend = rbind(strLineToAppend, c("# Values for general variables"))
strLineToAppend = rbind(strLineToAppend, c("#------------------------------"))
strLineToAppend = rbind(strLineToAppend, c( "model", model))
file = "~/Desktop/file.txt"
writeLines(c("#------------------------------", file)
9dfska
writeLines(c("#------------------------------"), file)
writeLines(c("# Values for general variables"), file)
writeLines(c("#------------------------------"), file)
writeLines(c("model", model), file)
writeLines(c("#------------------------------\n"), file)
writeLines(c("# Values for general variables\n"), file)
writeLines(c("# Values for general variables\n"), file, append = TRUE)
ID_BATCH = "test_jasa_yad_sampling"
NUM_OF_RUNS = 2
ITER_SAMPLING = 200
dirData = paste("data/", ID_BATCH, sep = "")
if( !dir.exists(dirData) ) stop("\n ERROR: couldn't find \t", dirData)
if( !dir.exists(dirData) ) stop("\n ERROR: couldn't find \t", dirData)
if( !dir.exists(dirData) ) stop("\n ERROR: couldn't find \t", dirData)
pwd
str
dirData = paste("data/", ID_BATCH, sep = "")
if( !dir.exists(dirData) ) stop("\n ERROR: couldn't find \t", dirData)
ID_BATCH = "test_jasa_yad_sampling"
NUM_OF_RUNS_ = 2
ITER_SAMPLING = 200
dirData = paste("data/", ID_BATCH, sep = "")
if( !dir.exists(dirData) ) stop("\n ERROR: couldn't find \t", dirData)
ID_BATCH = "test_jasa_yad_burnin"
dirData = paste("data/", ID_BATCH, sep = "")
if( !dir.exists(dirData) ) stop("\n ERROR: couldn't find \t", dirData)
fileHsl = paste(dirData, "/hsl-", ID_BATCH, ".txt", sep = "")
if( !file.exists(fileHsl) ) stop("\n ERROR: couldn't find", fileHsl)
fileHslFiltAR = paste(dirData, "/hsl_filtAR-", ID_BATCH, ".txt", sep = "")
if( !file.exists(fileHslFiltAR) ) stop("\n ERROR: couldn't find", fileHslFiltAR)
fileHslGupta = paste(dirData, "/hsl_Gupta-", ID_BATCH, ".txt", sep = "")
if( !file.exists(fileHslGupta) ) stop("\n ERROR: couldn't find", fileHslGupta)
fileFittingFactor = paste(dirData, "/fitting_factor-", ID_BATCH, ".txt", sep = "")
if( !file.exists(fileFittingFactor) ) stop("\n ERROR: couldn't find", fileFittingFactor)
fileInputfile = paste(dirData, "/inputfile_", ID_BATCH, ".txt", sep = "")
if( !file.exists(fileInputfile) ) stop("\n ERROR: couldn't find", fileInputfile)
#read the hsl files
dfHsl = read.table(fileHsl)
dfHsl_filtAR = read.table(fileHslFiltAR)
dfHsl_Gupta = read.table(fileHslGupta)
#read the fitting factor file
dfFittingFactor = read.table(fileFittingFactor)
#read the inputfile, most of the entries will be the same
lsInput = fnReadFile(strFilePath = fileInputfile)
fnReadFile = function(strFilePath)
{
##check arguments---------------------------------------#
if(length(strFilePath)!=1 || !is.character(strFilePath) || !file.access(strFilePath, mode = 4)==0) stop("\n ERROR: couldn't find ",strFilePath)
##main--------------------------------------------------#
dfInput = read.table(file=strFilePath, header = F, sep = "", colClasses=c("character", "character"), comment.char="#")
lsInput = setNames(split(dfInput[, 2], seq(nrow(dfInput))), nm = dfInput[, 1])
##output------------------------------------------------#
return(lsInput)
}
#read the inputfile, most of the entries will be the same
lsInput = fnReadFile(strFilePath = fileInputfile)
lsInput
#name of the simulation
nameSimulation = paste(ID_BATCH, "_opt_setting", sep = "")
dirSimulation = paste("../../output/", nameSimulation, sep = "")
#read the inputfile, most of the entries will be the same
lsInput = fnReadFile(strFilePath = fileInputfile)
#directory of the new simulation
dirSimulation = paste("../../output/", ID_NEW, sep = "")
ID_NEW = "test_jasa_yad_sampling"
#read the inputfile, most of the entries will be the same
lsInput = fnReadFile(strFilePath = fileInputfile)
#directory of the new simulation
dirSimulation = paste("../../output/", ID_NEW, sep = "")
#creating directory
dirInput = paste(dirSimulation, "/input/", sep = "")
if(!dir.exists(dirSimulation)){
invisible(dir.create(dirSimulation))
invisible(dir.create(dirInput))
}
#common parameters setting
model = lsInput$model
data = lsInput$data
method = "GHMC"
seed = lsInput$seed
iter_sampling = ITER_SAMPLING
iter_burn_in = "0"
integrator = "3sAIA-HMC"
t_L = "3"
t_stepsize = "13"
thinning = lsInput$thinning
t_Phi = "3"
Phi = "0.5"
iter_tune = lsInput$iter_tune
AR_target = lsInput$AR_target
delta_AR_target = lsInput$delta_AR_target
num_basis_spline = as.numeric(lsInput$num_basis_spline)
num_basis_spline_2 = as.numeric(lsInput$num_basis_spline_2)
spline_pol_degree = lsInput$spline_pol_degree
tfin_spl_bas = lsInput$tfin_spl_bas
num_out_cvodes = lsInput$num_out_cvodes
I0_mean = lsInput$I0_mean
I0_sd = lsInput$I0_sd
alpha_mean = lsInput$alpha_mean
alpha_sd = lsInput$alpha_sd
gamma_mean = lsInput$gamma_mean
gamma_sd = lsInput$gamma_sd
phi_inv_lambda = lsInput$phi_inv_lambda
nu_inv_lambda = lsInput$nu_inv_lambda
tau_shape = lsInput$tau_shape
tau_scale = lsInput$tau_scale
num_comp = lsInput$num_comp
num_comp_E = lsInput$num_comp_E
do_under_report = lsInput$do_under_report
T0_under = lsInput$T0_under
U0_under = lsInput$U0_under
T1_under = lsInput$T1_under
U1_under = lsInput$U1_under
do_grad_desc = lsInput$do_grad_desc
learning_rate = lsInput$learning_rate
max_iter = lsInput$max_iter
gammaU = lsInput$gammaU
gammaL = lsInput$gammaL
i = 1
#Write the initialpoint and splinebasis files
fileFinalPoint = paste(dirData, "/finalpoint_", i, ".txt", sep = "")
new_points = read.table(fileFinalPoint)
new_points
D = as.numeric(length(new_points))
L = round(2 * D / 3 - 1)
stepsize = dfHsl$V2[i] * 3
scaling_value = dfFittingFactor$V2[i]
stepsize_delta = (dfHsl_Gupta$V2[i] - dfHsl_filtAR$V2[i]) / 2 * 3
init_points = new_points[1,1:(D - num_basis_spline - num_basis_spline_2)]
spl_basis = new_points[1, (D - num_basis_spline - num_basis_spline_2 + 1):D]
init_points
spl_basis
fileInitialpointsNew = paste(dirInput, "initialpoint_", nameSimulation, "_", i, ".txt", sep ="")
if(file.exists(fileInitialpointsNew)){
invisible(file.remove(fileInitialpointsNew))
}
write.table(x = init_points, file = fileInitialpointsNew, append = T, row.names = F, col.names = F, quote = F)
fileSplinebasisNew = paste(dirInput, "splinebasis_", nameSimulation, "_", i, ".txt", sep ="")
if(file.exists(fileSplinebasisNew)){
invisible(file.remove(fileSplinebasisNew))
}
write.table(x = spl_basis, file = fileSplinebasisNew, append = T, row.names = F, col.names = F, quote = F)
strLineToAppend = c("model", model,
"data", data,
"method", method,
"seed", seed,
"iter_sampling", iter_sampling,
"iter_burn_in", iter_burn_in,
"integrator", integrator,
"t_L", t_L,
"L", L,
"t_stepsize", t_stepsize,
"stepsize", stepsize,
"thinning", thinning,
"t_Phi", t_Phi,
"Phi", Phi,
"scaling_value", scaling_value,
"stepsize_delta", stepsize_delta,
"iter_tune", iter_tune,
"AR_target", AR_target,
"delta_AR_target", delta_AR_target,
"num_basis_spline", num_basis_spline,
"num_basis_spline_2", num_basis_spline_2,
"spline_pol_degree", spline_pol_degree,
"tfin_spl_bas", tfin_spl_bas,
"num_out_cvodes", num_out_cvodes,
"I0_mean", I0_mean,
"I0_sd", I0_sd,
"alpha_mean", alpha_mean,
"alpha_sd", alpha_sd,
"gamma_mean", gamma_mean,
"gamma_sd", gamma_sd,
"phi_inv_lambda", phi_inv_lambda,
"nu_inv_lambda", nu_inv_lambda,
"tau_shape", tau_shape,
"tau_scale", tau_scale,
"num_comp", num_comp,
"num_comp_E", num_comp_E,
"do_under_report", do_under_report,
"T0_under", T0_under,
"U0_under", U0_under,
"T1_under", T1_under,
"U1_under", U1_under,
"do_grad_desc", do_grad_desc,
"learning_rate", learning_rate,
"max_iter", max_iter,
"gammaU", gammaU,
"gammaL", gammaL)
strLineToAppend
file_inputfile = paste(dirInput, "inputfile_", nameSimulation, "_", i, ".txt", sep = "")
if(file.exists(file_inputfile)){
invisible(file.remove(file_inputfile))
}
j = 1
c(strLineToAppend[j], strLineToAppend[j+1]
)
for(j in seq(1, length(strLineToAppend), 2)){
write(c(strLineToAppend[j], strLineToAppend[j+1]), file_inputfile, append = TRUE)
}
file_inputfile = paste(dirInput, "inputfile_", nameSimulation, "_", i, ".txt", sep = "")
if(file.exists(file_inputfile)){
invisible(file.remove(file_inputfile))
}
file_inputfile
i = 1
#Write the initialpoint and splinebasis files
fileFinalPoint = paste(dirData, "/finalpoint_", i, ".txt", sep = "")
new_points = read.table(fileFinalPoint)
D = as.numeric(length(new_points))
L = round(2 * D / 3 - 1)
stepsize = dfHsl$V2[i] * 3
scaling_value = dfFittingFactor$V2[i]
stepsize_delta = (dfHsl_Gupta$V2[i] - dfHsl_filtAR$V2[i]) / 2 * 3
init_points = new_points[1,1:(D - num_basis_spline - num_basis_spline_2)]
spl_basis = new_points[1, (D - num_basis_spline - num_basis_spline_2 + 1):D]
fileInitialpointsNew = paste(dirInput, "initialpoint_", ID_NEW, "_", i, ".txt", sep ="")
if(file.exists(fileInitialpointsNew)){
invisible(file.remove(fileInitialpointsNew))
}
write.table(x = init_points, file = fileInitialpointsNew, append = T, row.names = F, col.names = F, quote = F)
fileSplinebasisNew = paste(dirInput, "splinebasis_", ID_NEW, "_", i, ".txt", sep ="")
if(file.exists(fileSplinebasisNew)){
invisible(file.remove(fileSplinebasisNew))
}
write.table(x = spl_basis, file = fileSplinebasisNew, append = T, row.names = F, col.names = F, quote = F)
strLineToAppend = c("model", model,
"data", data,
"method", method,
"seed", seed,
"iter_sampling", iter_sampling,
"iter_burn_in", iter_burn_in,
"integrator", integrator,
"t_L", t_L,
"L", L,
"t_stepsize", t_stepsize,
"stepsize", stepsize,
"thinning", thinning,
"t_Phi", t_Phi,
"Phi", Phi,
"scaling_value", scaling_value,
"stepsize_delta", stepsize_delta,
"iter_tune", iter_tune,
"AR_target", AR_target,
"delta_AR_target", delta_AR_target,
"num_basis_spline", num_basis_spline,
"num_basis_spline_2", num_basis_spline_2,
"spline_pol_degree", spline_pol_degree,
"tfin_spl_bas", tfin_spl_bas,
"num_out_cvodes", num_out_cvodes,
"I0_mean", I0_mean,
"I0_sd", I0_sd,
"alpha_mean", alpha_mean,
"alpha_sd", alpha_sd,
"gamma_mean", gamma_mean,
"gamma_sd", gamma_sd,
"phi_inv_lambda", phi_inv_lambda,
"nu_inv_lambda", nu_inv_lambda,
"tau_shape", tau_shape,
"tau_scale", tau_scale,
"num_comp", num_comp,
"num_comp_E", num_comp_E,
"do_under_report", do_under_report,
"T0_under", T0_under,
"U0_under", U0_under,
"T1_under", T1_under,
"U1_under", U1_under,
"do_grad_desc", do_grad_desc,
"learning_rate", learning_rate,
"max_iter", max_iter,
"gammaU", gammaU,
"gammaL", gammaL)
file_inputfile = paste(dirInput, "inputfile_", ID_NEW, "_", i, ".txt", sep = "")
if(file.exists(file_inputfile)){
invisible(file.remove(file_inputfile))
}
for(j in seq(1, length(strLineToAppend), 2)){
write(c(strLineToAppend[j], strLineToAppend[j+1]), file_inputfile, append = TRUE)
}
j = 1
c(strLineToAppend[j], strLineToAppend[j+1])
file_inputfile = paste(dirInput, "inputfile_", ID_NEW, "_", i, ".txt", sep = "")
if(file.exists(file_inputfile)){
invisible(file.remove(file_inputfile))
}
for(j in seq(1, length(strLineToAppend), 2)){
write(c(strLineToAppend[j]), file_inputfile, append = TRUE)
write(c(strLineToAppend[j+1]), file_inputfile, append = FALSE)
}
inputfileTable = rbind(c("model", model))
inputfileTable
lsInput
lsInput[1,]
lsInput[]
lsInput[,1]
read.table(fileInputfile)
dfInput
dfInput = read.table(file_inputfile)
dfInput$model
dfInput$V1
dfInput
dfInput = read.table(file_inputfile)
dfInput
read.table(file_inputfile)
file_inputfile
dfInput = read.table(fileInputfile)
dfInput
dfInput$model
dfInput$V1
i = 0
}
i = 0
for(var in dfInput$V1){i = i+1
vars <- append(var)}
inputfileTable <- rbind(c("model", model))
inputfileTable <- rbind(c("data", data))
inputfileTable <- rbind(c("method", method))
inputfileTable <- rbind(c("seed", seed))
inputfileTable <- rbind(c("iter_sampling", iter_sampling))
inputfileTable <- rbind(c("iter_burn_in", iter_burn_in))
inputfileTable <- rbind(c("integrator", integrator))
inputfileTable <- rbind(c("t_L", t_L))
inputfileTable <- rbind(c("L", L))
inputfileTable <- rbind(c("t_stepsize", t_stepsize))
inputfileTable <- rbind(c("stepsize", stepsize))
inputfileTable <- rbind(c("thinning", thinning))
inputfileTable <- rbind(c("t_Phi", t_Phi))
inputfileTable <- rbind(c("Phi", Phi))
inputfileTable <- rbind(c("scaling_value", scaling_value))
inputfileTable <- rbind(c("stepsize_delta", stepsize_delta))
inputfileTable <- rbind(c("iter_tune", iter_tune))
inputfileTable <- rbind(c("AR_target", AR_target))
inputfileTable <- rbind(c("delta_AR_target", delta_AR_target))
inputfileTable <- rbind(c("num_basis_spline", num_basis_spline))
inputfileTable <- rbind(c("num_basis_spline_2", num_basis_spline_2))
inputfileTable <- rbind(c("spline_pol_degree", spline_pol_degree))
inputfileTable <- rbind(c("tfin_spl_bas", tfin_spl_bas))
inputfileTable <- rbind(c("num_out_cvodes", num_out_cvodes))
inputfileTable <- rbind(c("I0_mean", I0_mean))
inputfileTable <- rbind(c("I0_sd", I0_sd))
inputfileTable <- rbind(c("alpha_mean", alpha_mean))
inputfileTable <- rbind(c("alpha_sd", alpha_sd))
inputfileTable <- rbind(c("gamma_mean", gamma_mean))
inputfileTable <- rbind(c("gamma_sd", gamma_sd))
inputfileTable <- rbind(c("phi_inv_lambda", phi_inv_lambda))
inputfileTable <- rbind(c("nu_inv_lambda", nu_inv_lambda))
inputfileTable <- rbind(c("tau_shape", tau_shape))
inputfileTable <- rbind(c("tau_scale", tau_scale))
inputfileTable <- rbind(c("num_comp", num_comp))
inputfileTable <- rbind(c("num_comp_E", num_comp_E))
inputfileTable <- rbind(c("do_under_report", do_under_report))
inputfileTable <- rbind(c("T0_under", T0_under))
inputfileTable <- rbind(c("U0_under", U0_under))
inputfileTable <- rbind(c("T1_under", T1_under))
inputfileTable <- rbind(c("U1_under", U1_under))
inputfileTable <- rbind(c("do_grad_desc", do_grad_desc))
inputfileTable <- rbind(c("learning_rate", learning_rate))
inputfileTable <- rbind(c("max_iter", max_iter))
inputfileTable <- rbind(c("gammaU", gammaU))
inputfileTable <- rbind(c("gammaL", gammaL))
inputfileTable
inputfileTable <- rbind(c("model", model))
inputfileTable <- rbind(inputfileTable, c("data", data))
inputfileTable <- rbind(inputfileTable, c("method", method))
inputfileTable <- rbind(inputfileTable, c("seed", seed))
inputfileTable <- rbind(inputfileTable, c("iter_sampling", iter_sampling))
inputfileTable <- rbind(inputfileTable, c("iter_burn_in", iter_burn_in))
inputfileTable <- rbind(inputfileTable, c("integrator", integrator))
inputfileTable <- rbind(inputfileTable, c("t_L", t_L))
inputfileTable <- rbind(inputfileTable, c("L", L))
inputfileTable <- rbind(inputfileTable, c("t_stepsize", t_stepsize))
inputfileTable <- rbind(inputfileTable, c("stepsize", stepsize))
inputfileTable <- rbind(inputfileTable, c("thinning", thinning))
inputfileTable <- rbind(inputfileTable, c("t_Phi", t_Phi))
inputfileTable <- rbind(inputfileTable, c("Phi", Phi))
inputfileTable <- rbind(inputfileTable, c("scaling_value", scaling_value))
inputfileTable <- rbind(inputfileTable, c("stepsize_delta", stepsize_delta))
inputfileTable <- rbind(inputfileTable, c("iter_tune", iter_tune))
inputfileTable <- rbind(inputfileTable, c("AR_target", AR_target))
inputfileTable <- rbind(inputfileTable, c("delta_AR_target", delta_AR_target))
inputfileTable <- rbind(inputfileTable, c("num_basis_spline", num_basis_spline))
inputfileTable <- rbind(inputfileTable, c("num_basis_spline_2", num_basis_spline_2))
inputfileTable <- rbind(inputfileTable, c("spline_pol_degree", spline_pol_degree))
inputfileTable <- rbind(inputfileTable, c("tfin_spl_bas", tfin_spl_bas))
inputfileTable <- rbind(inputfileTable, c("num_out_cvodes", num_out_cvodes))
inputfileTable <- rbind(inputfileTable, c("I0_mean", I0_mean))
inputfileTable <- rbind(inputfileTable, c("I0_sd", I0_sd))
inputfileTable <- rbind(inputfileTable, c("alpha_mean", alpha_mean))
inputfileTable <- rbind(inputfileTable, c("alpha_sd", alpha_sd))
inputfileTable <- rbind(inputfileTable, c("gamma_mean", gamma_mean))
inputfileTable <- rbind(inputfileTable, c("gamma_sd", gamma_sd))
inputfileTable <- rbind(inputfileTable, c("phi_inv_lambda", phi_inv_lambda))
inputfileTable <- rbind(inputfileTable, c("nu_inv_lambda", nu_inv_lambda))
inputfileTable <- rbind(inputfileTable, c("tau_shape", tau_shape))
inputfileTable <- rbind(inputfileTable, c("tau_scale", tau_scale))
inputfileTable <- rbind(inputfileTable, c("num_comp", num_comp))
inputfileTable <- rbind(inputfileTable, c("num_comp_E", num_comp_E))
inputfileTable <- rbind(inputfileTable, c("do_under_report", do_under_report))
inputfileTable <- rbind(inputfileTable, c("T0_under", T0_under))
inputfileTable <- rbind(inputfileTable, c("U0_under", U0_under))
inputfileTable <- rbind(inputfileTable, c("T1_under", T1_under))
inputfileTable <- rbind(inputfileTable, c("U1_under", U1_under))
inputfileTable <- rbind(inputfileTable, c("do_grad_desc", do_grad_desc))
inputfileTable <- rbind(inputfileTable, c("learning_rate", learning_rate))
inputfileTable <- rbind(inputfileTable, c("max_iter", max_iter))
inputfileTable <- rbind(inputfileTable, c("gammaU", gammaU))
inputfileTable <- rbind(inputfileTable, c("gammaL", gammaL))
inputfileTable
file_inputfile = paste(dirInput, "inputfile_", ID_NEW, "_", i, ".txt", sep = "")
if(file.exists(file_inputfile)){
invisible(file.remove(file_inputfile))
}
write.table(inputfileTable, file_inputfile, row.names = FALSE, col.names = FALSE)
file_inputfile = paste(dirInput, "inputfile_", ID_NEW, "_", i, ".txt", sep = "")
if(file.exists(file_inputfile)){
invisible(file.remove(file_inputfile))
}
write.table(inputfileTable, file_inputfile, row.names = FALSE, col.names = FALSE, quote = F)
